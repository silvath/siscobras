//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.510
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace mdlDataBaseData.Tabelas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class XsdTbRelatorioCirculos : DataSet {
        
        private tbRelatorioCirculosDataTable tabletbRelatorioCirculos;
        
        public XsdTbRelatorioCirculos() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected XsdTbRelatorioCirculos(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tbRelatorioCirculos"] != null)) {
                    this.Tables.Add(new tbRelatorioCirculosDataTable(ds.Tables["tbRelatorioCirculos"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbRelatorioCirculosDataTable tbRelatorioCirculos {
            get {
                return this.tabletbRelatorioCirculos;
            }
        }
        
        public override DataSet Clone() {
            XsdTbRelatorioCirculos cln = ((XsdTbRelatorioCirculos)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tbRelatorioCirculos"] != null)) {
                this.Tables.Add(new tbRelatorioCirculosDataTable(ds.Tables["tbRelatorioCirculos"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletbRelatorioCirculos = ((tbRelatorioCirculosDataTable)(this.Tables["tbRelatorioCirculos"]));
            if ((this.tabletbRelatorioCirculos != null)) {
                this.tabletbRelatorioCirculos.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "XsdTbRelatorioCirculos";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/XsdTbRelatorioCirculos.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletbRelatorioCirculos = new tbRelatorioCirculosDataTable();
            this.Tables.Add(this.tabletbRelatorioCirculos);
        }
        
        private bool ShouldSerializetbRelatorioCirculos() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tbRelatorioCirculosRowChangeEventHandler(object sender, tbRelatorioCirculosRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbRelatorioCirculosDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnnIdExportador;
            
            private DataColumn columnnIdTipo;
            
            private DataColumn columnnIdRelatorio;
            
            private DataColumn columnnIdCirculo;
            
            private DataColumn columnnX1;
            
            private DataColumn columnnY1;
            
            private DataColumn columnnX2;
            
            private DataColumn columnnY2;
            
            private DataColumn columnnEspessura;
            
            private DataColumn columnnCorR;
            
            private DataColumn columnnCorG;
            
            private DataColumn columnnCorB;
            
            private DataColumn columnbVisivelImpressao;
            
            private DataColumn columnnGrupo;
            
            private DataColumn columnnEstilo_caneta;
            
            private DataColumn columnnEstilo_linha;
            
            private DataColumn columnnCorRGB;
            
            internal tbRelatorioCirculosDataTable() : 
                    base("tbRelatorioCirculos") {
                this.InitClass();
            }
            
            internal tbRelatorioCirculosDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nIdExportadorColumn {
                get {
                    return this.columnnIdExportador;
                }
            }
            
            internal DataColumn nIdTipoColumn {
                get {
                    return this.columnnIdTipo;
                }
            }
            
            internal DataColumn nIdRelatorioColumn {
                get {
                    return this.columnnIdRelatorio;
                }
            }
            
            internal DataColumn nIdCirculoColumn {
                get {
                    return this.columnnIdCirculo;
                }
            }
            
            internal DataColumn nX1Column {
                get {
                    return this.columnnX1;
                }
            }
            
            internal DataColumn nY1Column {
                get {
                    return this.columnnY1;
                }
            }
            
            internal DataColumn nX2Column {
                get {
                    return this.columnnX2;
                }
            }
            
            internal DataColumn nY2Column {
                get {
                    return this.columnnY2;
                }
            }
            
            internal DataColumn nEspessuraColumn {
                get {
                    return this.columnnEspessura;
                }
            }
            
            internal DataColumn nCorRColumn {
                get {
                    return this.columnnCorR;
                }
            }
            
            internal DataColumn nCorGColumn {
                get {
                    return this.columnnCorG;
                }
            }
            
            internal DataColumn nCorBColumn {
                get {
                    return this.columnnCorB;
                }
            }
            
            internal DataColumn bVisivelImpressaoColumn {
                get {
                    return this.columnbVisivelImpressao;
                }
            }
            
            internal DataColumn nGrupoColumn {
                get {
                    return this.columnnGrupo;
                }
            }
            
            internal DataColumn nEstilo_canetaColumn {
                get {
                    return this.columnnEstilo_caneta;
                }
            }
            
            internal DataColumn nEstilo_linhaColumn {
                get {
                    return this.columnnEstilo_linha;
                }
            }
            
            internal DataColumn nCorRGBColumn {
                get {
                    return this.columnnCorRGB;
                }
            }
            
            public tbRelatorioCirculosRow this[int index] {
                get {
                    return ((tbRelatorioCirculosRow)(this.Rows[index]));
                }
            }
            
            public event tbRelatorioCirculosRowChangeEventHandler tbRelatorioCirculosRowChanged;
            
            public event tbRelatorioCirculosRowChangeEventHandler tbRelatorioCirculosRowChanging;
            
            public event tbRelatorioCirculosRowChangeEventHandler tbRelatorioCirculosRowDeleted;
            
            public event tbRelatorioCirculosRowChangeEventHandler tbRelatorioCirculosRowDeleting;
            
            public void AddtbRelatorioCirculosRow(tbRelatorioCirculosRow row) {
                this.Rows.Add(row);
            }
            
            public tbRelatorioCirculosRow AddtbRelatorioCirculosRow(
                        int nIdExportador, 
                        int nIdTipo, 
                        int nIdRelatorio, 
                        int nIdCirculo, 
                        int nX1, 
                        int nY1, 
                        int nX2, 
                        int nY2, 
                        System.Double nEspessura, 
                        short nCorR, 
                        short nCorG, 
                        short nCorB, 
                        bool bVisivelImpressao, 
                        short nGrupo, 
                        short nEstilo_caneta, 
                        short nEstilo_linha, 
                        int nCorRGB) {
                tbRelatorioCirculosRow rowtbRelatorioCirculosRow = ((tbRelatorioCirculosRow)(this.NewRow()));
                rowtbRelatorioCirculosRow.ItemArray = new object[] {
                        nIdExportador,
                        nIdTipo,
                        nIdRelatorio,
                        nIdCirculo,
                        nX1,
                        nY1,
                        nX2,
                        nY2,
                        nEspessura,
                        nCorR,
                        nCorG,
                        nCorB,
                        bVisivelImpressao,
                        nGrupo,
                        nEstilo_caneta,
                        nEstilo_linha,
                        nCorRGB};
                this.Rows.Add(rowtbRelatorioCirculosRow);
                return rowtbRelatorioCirculosRow;
            }
            
            public tbRelatorioCirculosRow FindBynIdExportadornIdTiponIdRelatorionIdCirculo(int nIdExportador, int nIdTipo, int nIdRelatorio, int nIdCirculo) {
                return ((tbRelatorioCirculosRow)(this.Rows.Find(new object[] {
                            nIdExportador,
                            nIdTipo,
                            nIdRelatorio,
                            nIdCirculo})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tbRelatorioCirculosDataTable cln = ((tbRelatorioCirculosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tbRelatorioCirculosDataTable();
            }
            
            internal void InitVars() {
                this.columnnIdExportador = this.Columns["nIdExportador"];
                this.columnnIdTipo = this.Columns["nIdTipo"];
                this.columnnIdRelatorio = this.Columns["nIdRelatorio"];
                this.columnnIdCirculo = this.Columns["nIdCirculo"];
                this.columnnX1 = this.Columns["nX1"];
                this.columnnY1 = this.Columns["nY1"];
                this.columnnX2 = this.Columns["nX2"];
                this.columnnY2 = this.Columns["nY2"];
                this.columnnEspessura = this.Columns["nEspessura"];
                this.columnnCorR = this.Columns["nCorR"];
                this.columnnCorG = this.Columns["nCorG"];
                this.columnnCorB = this.Columns["nCorB"];
                this.columnbVisivelImpressao = this.Columns["bVisivelImpressao"];
                this.columnnGrupo = this.Columns["nGrupo"];
                this.columnnEstilo_caneta = this.Columns["nEstilo_caneta"];
                this.columnnEstilo_linha = this.Columns["nEstilo_linha"];
                this.columnnCorRGB = this.Columns["nCorRGB"];
            }
            
            private void InitClass() {
                this.columnnIdExportador = new DataColumn("nIdExportador", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnIdExportador);
                this.columnnIdTipo = new DataColumn("nIdTipo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnIdTipo);
                this.columnnIdRelatorio = new DataColumn("nIdRelatorio", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnIdRelatorio);
                this.columnnIdCirculo = new DataColumn("nIdCirculo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnIdCirculo);
                this.columnnX1 = new DataColumn("nX1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnX1);
                this.columnnY1 = new DataColumn("nY1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnY1);
                this.columnnX2 = new DataColumn("nX2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnX2);
                this.columnnY2 = new DataColumn("nY2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnY2);
                this.columnnEspessura = new DataColumn("nEspessura", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnEspessura);
                this.columnnCorR = new DataColumn("nCorR", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnCorR);
                this.columnnCorG = new DataColumn("nCorG", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnCorG);
                this.columnnCorB = new DataColumn("nCorB", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnCorB);
                this.columnbVisivelImpressao = new DataColumn("bVisivelImpressao", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbVisivelImpressao);
                this.columnnGrupo = new DataColumn("nGrupo", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnGrupo);
                this.columnnEstilo_caneta = new DataColumn("nEstilo_caneta", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnEstilo_caneta);
                this.columnnEstilo_linha = new DataColumn("nEstilo_linha", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnEstilo_linha);
                this.columnnCorRGB = new DataColumn("nCorRGB", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnCorRGB);
                this.Constraints.Add(new UniqueConstraint("XsdTbRelatorioCirculosKey1", new DataColumn[] {
                                this.columnnIdExportador,
                                this.columnnIdTipo,
                                this.columnnIdRelatorio,
                                this.columnnIdCirculo}, true));
                this.columnnIdExportador.AllowDBNull = false;
                this.columnnIdTipo.AllowDBNull = false;
                this.columnnIdRelatorio.AllowDBNull = false;
                this.columnnIdCirculo.AllowDBNull = false;
            }
            
            public tbRelatorioCirculosRow NewtbRelatorioCirculosRow() {
                return ((tbRelatorioCirculosRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tbRelatorioCirculosRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tbRelatorioCirculosRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbRelatorioCirculosRowChanged != null)) {
                    this.tbRelatorioCirculosRowChanged(this, new tbRelatorioCirculosRowChangeEvent(((tbRelatorioCirculosRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbRelatorioCirculosRowChanging != null)) {
                    this.tbRelatorioCirculosRowChanging(this, new tbRelatorioCirculosRowChangeEvent(((tbRelatorioCirculosRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbRelatorioCirculosRowDeleted != null)) {
                    this.tbRelatorioCirculosRowDeleted(this, new tbRelatorioCirculosRowChangeEvent(((tbRelatorioCirculosRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbRelatorioCirculosRowDeleting != null)) {
                    this.tbRelatorioCirculosRowDeleting(this, new tbRelatorioCirculosRowChangeEvent(((tbRelatorioCirculosRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetbRelatorioCirculosRow(tbRelatorioCirculosRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbRelatorioCirculosRow : DataRow {
            
            private tbRelatorioCirculosDataTable tabletbRelatorioCirculos;
            
            internal tbRelatorioCirculosRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbRelatorioCirculos = ((tbRelatorioCirculosDataTable)(this.Table));
            }
            
            public int nIdExportador {
                get {
                    return ((int)(this[this.tabletbRelatorioCirculos.nIdExportadorColumn]));
                }
                set {
                    this[this.tabletbRelatorioCirculos.nIdExportadorColumn] = value;
                }
            }
            
            public int nIdTipo {
                get {
                    return ((int)(this[this.tabletbRelatorioCirculos.nIdTipoColumn]));
                }
                set {
                    this[this.tabletbRelatorioCirculos.nIdTipoColumn] = value;
                }
            }
            
            public int nIdRelatorio {
                get {
                    return ((int)(this[this.tabletbRelatorioCirculos.nIdRelatorioColumn]));
                }
                set {
                    this[this.tabletbRelatorioCirculos.nIdRelatorioColumn] = value;
                }
            }
            
            public int nIdCirculo {
                get {
                    return ((int)(this[this.tabletbRelatorioCirculos.nIdCirculoColumn]));
                }
                set {
                    this[this.tabletbRelatorioCirculos.nIdCirculoColumn] = value;
                }
            }
            
            public int nX1 {
                get {
                    try {
                        return ((int)(this[this.tabletbRelatorioCirculos.nX1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nX1Column] = value;
                }
            }
            
            public int nY1 {
                get {
                    try {
                        return ((int)(this[this.tabletbRelatorioCirculos.nY1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nY1Column] = value;
                }
            }
            
            public int nX2 {
                get {
                    try {
                        return ((int)(this[this.tabletbRelatorioCirculos.nX2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nX2Column] = value;
                }
            }
            
            public int nY2 {
                get {
                    try {
                        return ((int)(this[this.tabletbRelatorioCirculos.nY2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nY2Column] = value;
                }
            }
            
            public System.Double nEspessura {
                get {
                    try {
                        return ((System.Double)(this[this.tabletbRelatorioCirculos.nEspessuraColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nEspessuraColumn] = value;
                }
            }
            
            public short nCorR {
                get {
                    try {
                        return ((short)(this[this.tabletbRelatorioCirculos.nCorRColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nCorRColumn] = value;
                }
            }
            
            public short nCorG {
                get {
                    try {
                        return ((short)(this[this.tabletbRelatorioCirculos.nCorGColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nCorGColumn] = value;
                }
            }
            
            public short nCorB {
                get {
                    try {
                        return ((short)(this[this.tabletbRelatorioCirculos.nCorBColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nCorBColumn] = value;
                }
            }
            
            public bool bVisivelImpressao {
                get {
                    try {
                        return ((bool)(this[this.tabletbRelatorioCirculos.bVisivelImpressaoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.bVisivelImpressaoColumn] = value;
                }
            }
            
            public short nGrupo {
                get {
                    try {
                        return ((short)(this[this.tabletbRelatorioCirculos.nGrupoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nGrupoColumn] = value;
                }
            }
            
            public short nEstilo_caneta {
                get {
                    try {
                        return ((short)(this[this.tabletbRelatorioCirculos.nEstilo_canetaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nEstilo_canetaColumn] = value;
                }
            }
            
            public short nEstilo_linha {
                get {
                    try {
                        return ((short)(this[this.tabletbRelatorioCirculos.nEstilo_linhaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nEstilo_linhaColumn] = value;
                }
            }
            
            public int nCorRGB {
                get {
                    try {
                        return ((int)(this[this.tabletbRelatorioCirculos.nCorRGBColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbRelatorioCirculos.nCorRGBColumn] = value;
                }
            }
            
            public bool IsnX1Null() {
                return this.IsNull(this.tabletbRelatorioCirculos.nX1Column);
            }
            
            public void SetnX1Null() {
                this[this.tabletbRelatorioCirculos.nX1Column] = System.Convert.DBNull;
            }
            
            public bool IsnY1Null() {
                return this.IsNull(this.tabletbRelatorioCirculos.nY1Column);
            }
            
            public void SetnY1Null() {
                this[this.tabletbRelatorioCirculos.nY1Column] = System.Convert.DBNull;
            }
            
            public bool IsnX2Null() {
                return this.IsNull(this.tabletbRelatorioCirculos.nX2Column);
            }
            
            public void SetnX2Null() {
                this[this.tabletbRelatorioCirculos.nX2Column] = System.Convert.DBNull;
            }
            
            public bool IsnY2Null() {
                return this.IsNull(this.tabletbRelatorioCirculos.nY2Column);
            }
            
            public void SetnY2Null() {
                this[this.tabletbRelatorioCirculos.nY2Column] = System.Convert.DBNull;
            }
            
            public bool IsnEspessuraNull() {
                return this.IsNull(this.tabletbRelatorioCirculos.nEspessuraColumn);
            }
            
            public void SetnEspessuraNull() {
                this[this.tabletbRelatorioCirculos.nEspessuraColumn] = System.Convert.DBNull;
            }
            
            public bool IsnCorRNull() {
                return this.IsNull(this.tabletbRelatorioCirculos.nCorRColumn);
            }
            
            public void SetnCorRNull() {
                this[this.tabletbRelatorioCirculos.nCorRColumn] = System.Convert.DBNull;
            }
            
            public bool IsnCorGNull() {
                return this.IsNull(this.tabletbRelatorioCirculos.nCorGColumn);
            }
            
            public void SetnCorGNull() {
                this[this.tabletbRelatorioCirculos.nCorGColumn] = System.Convert.DBNull;
            }
            
            public bool IsnCorBNull() {
                return this.IsNull(this.tabletbRelatorioCirculos.nCorBColumn);
            }
            
            public void SetnCorBNull() {
                this[this.tabletbRelatorioCirculos.nCorBColumn] = System.Convert.DBNull;
            }
            
            public bool IsbVisivelImpressaoNull() {
                return this.IsNull(this.tabletbRelatorioCirculos.bVisivelImpressaoColumn);
            }
            
            public void SetbVisivelImpressaoNull() {
                this[this.tabletbRelatorioCirculos.bVisivelImpressaoColumn] = System.Convert.DBNull;
            }
            
            public bool IsnGrupoNull() {
                return this.IsNull(this.tabletbRelatorioCirculos.nGrupoColumn);
            }
            
            public void SetnGrupoNull() {
                this[this.tabletbRelatorioCirculos.nGrupoColumn] = System.Convert.DBNull;
            }
            
            public bool IsnEstilo_canetaNull() {
                return this.IsNull(this.tabletbRelatorioCirculos.nEstilo_canetaColumn);
            }
            
            public void SetnEstilo_canetaNull() {
                this[this.tabletbRelatorioCirculos.nEstilo_canetaColumn] = System.Convert.DBNull;
            }
            
            public bool IsnEstilo_linhaNull() {
                return this.IsNull(this.tabletbRelatorioCirculos.nEstilo_linhaColumn);
            }
            
            public void SetnEstilo_linhaNull() {
                this[this.tabletbRelatorioCirculos.nEstilo_linhaColumn] = System.Convert.DBNull;
            }
            
            public bool IsnCorRGBNull() {
                return this.IsNull(this.tabletbRelatorioCirculos.nCorRGBColumn);
            }
            
            public void SetnCorRGBNull() {
                this[this.tabletbRelatorioCirculos.nCorRGBColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbRelatorioCirculosRowChangeEvent : EventArgs {
            
            private tbRelatorioCirculosRow eventRow;
            
            private DataRowAction eventAction;
            
            public tbRelatorioCirculosRowChangeEvent(tbRelatorioCirculosRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tbRelatorioCirculosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
