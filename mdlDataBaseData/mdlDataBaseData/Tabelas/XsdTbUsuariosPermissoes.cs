//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.510
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace mdlDataBaseData.Tabelas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class XsdTbUsuariosPermissoes : DataSet {
        
        private tbUsuariosPermissoesDataTable tabletbUsuariosPermissoes;
        
        public XsdTbUsuariosPermissoes() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected XsdTbUsuariosPermissoes(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tbUsuariosPermissoes"] != null)) {
                    this.Tables.Add(new tbUsuariosPermissoesDataTable(ds.Tables["tbUsuariosPermissoes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbUsuariosPermissoesDataTable tbUsuariosPermissoes {
            get {
                return this.tabletbUsuariosPermissoes;
            }
        }
        
        public override DataSet Clone() {
            XsdTbUsuariosPermissoes cln = ((XsdTbUsuariosPermissoes)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tbUsuariosPermissoes"] != null)) {
                this.Tables.Add(new tbUsuariosPermissoesDataTable(ds.Tables["tbUsuariosPermissoes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletbUsuariosPermissoes = ((tbUsuariosPermissoesDataTable)(this.Tables["tbUsuariosPermissoes"]));
            if ((this.tabletbUsuariosPermissoes != null)) {
                this.tabletbUsuariosPermissoes.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "XsdTbUsuariosPermissoes";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/XsdTbUsuariosPermissoes.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletbUsuariosPermissoes = new tbUsuariosPermissoesDataTable();
            this.Tables.Add(this.tabletbUsuariosPermissoes);
        }
        
        private bool ShouldSerializetbUsuariosPermissoes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tbUsuariosPermissoesRowChangeEventHandler(object sender, tbUsuariosPermissoesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbUsuariosPermissoesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnnIdPermissao;
            
            private DataColumn columnstrNome;
            
            private DataColumn columnstrDescricao;
            
            internal tbUsuariosPermissoesDataTable() : 
                    base("tbUsuariosPermissoes") {
                this.InitClass();
            }
            
            internal tbUsuariosPermissoesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nIdPermissaoColumn {
                get {
                    return this.columnnIdPermissao;
                }
            }
            
            internal DataColumn strNomeColumn {
                get {
                    return this.columnstrNome;
                }
            }
            
            internal DataColumn strDescricaoColumn {
                get {
                    return this.columnstrDescricao;
                }
            }
            
            public tbUsuariosPermissoesRow this[int index] {
                get {
                    return ((tbUsuariosPermissoesRow)(this.Rows[index]));
                }
            }
            
            public event tbUsuariosPermissoesRowChangeEventHandler tbUsuariosPermissoesRowChanged;
            
            public event tbUsuariosPermissoesRowChangeEventHandler tbUsuariosPermissoesRowChanging;
            
            public event tbUsuariosPermissoesRowChangeEventHandler tbUsuariosPermissoesRowDeleted;
            
            public event tbUsuariosPermissoesRowChangeEventHandler tbUsuariosPermissoesRowDeleting;
            
            public void AddtbUsuariosPermissoesRow(tbUsuariosPermissoesRow row) {
                this.Rows.Add(row);
            }
            
            public tbUsuariosPermissoesRow AddtbUsuariosPermissoesRow(int nIdPermissao, string strNome, string strDescricao) {
                tbUsuariosPermissoesRow rowtbUsuariosPermissoesRow = ((tbUsuariosPermissoesRow)(this.NewRow()));
                rowtbUsuariosPermissoesRow.ItemArray = new object[] {
                        nIdPermissao,
                        strNome,
                        strDescricao};
                this.Rows.Add(rowtbUsuariosPermissoesRow);
                return rowtbUsuariosPermissoesRow;
            }
            
            public tbUsuariosPermissoesRow FindBynIdPermissao(int nIdPermissao) {
                return ((tbUsuariosPermissoesRow)(this.Rows.Find(new object[] {
                            nIdPermissao})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tbUsuariosPermissoesDataTable cln = ((tbUsuariosPermissoesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tbUsuariosPermissoesDataTable();
            }
            
            internal void InitVars() {
                this.columnnIdPermissao = this.Columns["nIdPermissao"];
                this.columnstrNome = this.Columns["strNome"];
                this.columnstrDescricao = this.Columns["strDescricao"];
            }
            
            private void InitClass() {
                this.columnnIdPermissao = new DataColumn("nIdPermissao", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnIdPermissao);
                this.columnstrNome = new DataColumn("strNome", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstrNome);
                this.columnstrDescricao = new DataColumn("strDescricao", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstrDescricao);
                this.Constraints.Add(new UniqueConstraint("XsdTbUsuariosPermissoesKey1", new DataColumn[] {
                                this.columnnIdPermissao}, true));
                this.columnnIdPermissao.AllowDBNull = false;
                this.columnnIdPermissao.Unique = true;
            }
            
            public tbUsuariosPermissoesRow NewtbUsuariosPermissoesRow() {
                return ((tbUsuariosPermissoesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tbUsuariosPermissoesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tbUsuariosPermissoesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbUsuariosPermissoesRowChanged != null)) {
                    this.tbUsuariosPermissoesRowChanged(this, new tbUsuariosPermissoesRowChangeEvent(((tbUsuariosPermissoesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbUsuariosPermissoesRowChanging != null)) {
                    this.tbUsuariosPermissoesRowChanging(this, new tbUsuariosPermissoesRowChangeEvent(((tbUsuariosPermissoesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbUsuariosPermissoesRowDeleted != null)) {
                    this.tbUsuariosPermissoesRowDeleted(this, new tbUsuariosPermissoesRowChangeEvent(((tbUsuariosPermissoesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbUsuariosPermissoesRowDeleting != null)) {
                    this.tbUsuariosPermissoesRowDeleting(this, new tbUsuariosPermissoesRowChangeEvent(((tbUsuariosPermissoesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetbUsuariosPermissoesRow(tbUsuariosPermissoesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbUsuariosPermissoesRow : DataRow {
            
            private tbUsuariosPermissoesDataTable tabletbUsuariosPermissoes;
            
            internal tbUsuariosPermissoesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbUsuariosPermissoes = ((tbUsuariosPermissoesDataTable)(this.Table));
            }
            
            public int nIdPermissao {
                get {
                    return ((int)(this[this.tabletbUsuariosPermissoes.nIdPermissaoColumn]));
                }
                set {
                    this[this.tabletbUsuariosPermissoes.nIdPermissaoColumn] = value;
                }
            }
            
            public string strNome {
                get {
                    try {
                        return ((string)(this[this.tabletbUsuariosPermissoes.strNomeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbUsuariosPermissoes.strNomeColumn] = value;
                }
            }
            
            public string strDescricao {
                get {
                    try {
                        return ((string)(this[this.tabletbUsuariosPermissoes.strDescricaoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbUsuariosPermissoes.strDescricaoColumn] = value;
                }
            }
            
            public bool IsstrNomeNull() {
                return this.IsNull(this.tabletbUsuariosPermissoes.strNomeColumn);
            }
            
            public void SetstrNomeNull() {
                this[this.tabletbUsuariosPermissoes.strNomeColumn] = System.Convert.DBNull;
            }
            
            public bool IsstrDescricaoNull() {
                return this.IsNull(this.tabletbUsuariosPermissoes.strDescricaoColumn);
            }
            
            public void SetstrDescricaoNull() {
                this[this.tabletbUsuariosPermissoes.strDescricaoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbUsuariosPermissoesRowChangeEvent : EventArgs {
            
            private tbUsuariosPermissoesRow eventRow;
            
            private DataRowAction eventAction;
            
            public tbUsuariosPermissoesRowChangeEvent(tbUsuariosPermissoesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tbUsuariosPermissoesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
