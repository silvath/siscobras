//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.510
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace mdlDataBaseData.Tabelas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class XsdTbUnidadesEspaco : DataSet {
        
        private tbUnidadesEspacoDataTable tabletbUnidadesEspaco;
        
        public XsdTbUnidadesEspaco() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected XsdTbUnidadesEspaco(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tbUnidadesEspaco"] != null)) {
                    this.Tables.Add(new tbUnidadesEspacoDataTable(ds.Tables["tbUnidadesEspaco"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbUnidadesEspacoDataTable tbUnidadesEspaco {
            get {
                return this.tabletbUnidadesEspaco;
            }
        }
        
        public override DataSet Clone() {
            XsdTbUnidadesEspaco cln = ((XsdTbUnidadesEspaco)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tbUnidadesEspaco"] != null)) {
                this.Tables.Add(new tbUnidadesEspacoDataTable(ds.Tables["tbUnidadesEspaco"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletbUnidadesEspaco = ((tbUnidadesEspacoDataTable)(this.Tables["tbUnidadesEspaco"]));
            if ((this.tabletbUnidadesEspaco != null)) {
                this.tabletbUnidadesEspaco.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "XsdTbUnidadesEspaco";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/XsdTbUnidadesEspaco.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletbUnidadesEspaco = new tbUnidadesEspacoDataTable();
            this.Tables.Add(this.tabletbUnidadesEspaco);
        }
        
        private bool ShouldSerializetbUnidadesEspaco() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tbUnidadesEspacoRowChangeEventHandler(object sender, tbUnidadesEspacoRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbUnidadesEspacoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnnIdUnidadeEspaco;
            
            private DataColumn columnstrNome;
            
            private DataColumn columnstrSigla;
            
            internal tbUnidadesEspacoDataTable() : 
                    base("tbUnidadesEspaco") {
                this.InitClass();
            }
            
            internal tbUnidadesEspacoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nIdUnidadeEspacoColumn {
                get {
                    return this.columnnIdUnidadeEspaco;
                }
            }
            
            internal DataColumn strNomeColumn {
                get {
                    return this.columnstrNome;
                }
            }
            
            internal DataColumn strSiglaColumn {
                get {
                    return this.columnstrSigla;
                }
            }
            
            public tbUnidadesEspacoRow this[int index] {
                get {
                    return ((tbUnidadesEspacoRow)(this.Rows[index]));
                }
            }
            
            public event tbUnidadesEspacoRowChangeEventHandler tbUnidadesEspacoRowChanged;
            
            public event tbUnidadesEspacoRowChangeEventHandler tbUnidadesEspacoRowChanging;
            
            public event tbUnidadesEspacoRowChangeEventHandler tbUnidadesEspacoRowDeleted;
            
            public event tbUnidadesEspacoRowChangeEventHandler tbUnidadesEspacoRowDeleting;
            
            public void AddtbUnidadesEspacoRow(tbUnidadesEspacoRow row) {
                this.Rows.Add(row);
            }
            
            public tbUnidadesEspacoRow AddtbUnidadesEspacoRow(int nIdUnidadeEspaco, string strNome, string strSigla) {
                tbUnidadesEspacoRow rowtbUnidadesEspacoRow = ((tbUnidadesEspacoRow)(this.NewRow()));
                rowtbUnidadesEspacoRow.ItemArray = new object[] {
                        nIdUnidadeEspaco,
                        strNome,
                        strSigla};
                this.Rows.Add(rowtbUnidadesEspacoRow);
                return rowtbUnidadesEspacoRow;
            }
            
            public tbUnidadesEspacoRow FindBynIdUnidadeEspaco(int nIdUnidadeEspaco) {
                return ((tbUnidadesEspacoRow)(this.Rows.Find(new object[] {
                            nIdUnidadeEspaco})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tbUnidadesEspacoDataTable cln = ((tbUnidadesEspacoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tbUnidadesEspacoDataTable();
            }
            
            internal void InitVars() {
                this.columnnIdUnidadeEspaco = this.Columns["nIdUnidadeEspaco"];
                this.columnstrNome = this.Columns["strNome"];
                this.columnstrSigla = this.Columns["strSigla"];
            }
            
            private void InitClass() {
                this.columnnIdUnidadeEspaco = new DataColumn("nIdUnidadeEspaco", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnIdUnidadeEspaco);
                this.columnstrNome = new DataColumn("strNome", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstrNome);
                this.columnstrSigla = new DataColumn("strSigla", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstrSigla);
                this.Constraints.Add(new UniqueConstraint("XsdTbUnidadesEspacoKey1", new DataColumn[] {
                                this.columnnIdUnidadeEspaco}, true));
                this.columnnIdUnidadeEspaco.AllowDBNull = false;
                this.columnnIdUnidadeEspaco.Unique = true;
            }
            
            public tbUnidadesEspacoRow NewtbUnidadesEspacoRow() {
                return ((tbUnidadesEspacoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tbUnidadesEspacoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tbUnidadesEspacoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbUnidadesEspacoRowChanged != null)) {
                    this.tbUnidadesEspacoRowChanged(this, new tbUnidadesEspacoRowChangeEvent(((tbUnidadesEspacoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbUnidadesEspacoRowChanging != null)) {
                    this.tbUnidadesEspacoRowChanging(this, new tbUnidadesEspacoRowChangeEvent(((tbUnidadesEspacoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbUnidadesEspacoRowDeleted != null)) {
                    this.tbUnidadesEspacoRowDeleted(this, new tbUnidadesEspacoRowChangeEvent(((tbUnidadesEspacoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbUnidadesEspacoRowDeleting != null)) {
                    this.tbUnidadesEspacoRowDeleting(this, new tbUnidadesEspacoRowChangeEvent(((tbUnidadesEspacoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetbUnidadesEspacoRow(tbUnidadesEspacoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbUnidadesEspacoRow : DataRow {
            
            private tbUnidadesEspacoDataTable tabletbUnidadesEspaco;
            
            internal tbUnidadesEspacoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbUnidadesEspaco = ((tbUnidadesEspacoDataTable)(this.Table));
            }
            
            public int nIdUnidadeEspaco {
                get {
                    return ((int)(this[this.tabletbUnidadesEspaco.nIdUnidadeEspacoColumn]));
                }
                set {
                    this[this.tabletbUnidadesEspaco.nIdUnidadeEspacoColumn] = value;
                }
            }
            
            public string strNome {
                get {
                    try {
                        return ((string)(this[this.tabletbUnidadesEspaco.strNomeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbUnidadesEspaco.strNomeColumn] = value;
                }
            }
            
            public string strSigla {
                get {
                    try {
                        return ((string)(this[this.tabletbUnidadesEspaco.strSiglaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletbUnidadesEspaco.strSiglaColumn] = value;
                }
            }
            
            public bool IsstrNomeNull() {
                return this.IsNull(this.tabletbUnidadesEspaco.strNomeColumn);
            }
            
            public void SetstrNomeNull() {
                this[this.tabletbUnidadesEspaco.strNomeColumn] = System.Convert.DBNull;
            }
            
            public bool IsstrSiglaNull() {
                return this.IsNull(this.tabletbUnidadesEspaco.strSiglaColumn);
            }
            
            public void SetstrSiglaNull() {
                this[this.tabletbUnidadesEspaco.strSiglaColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbUnidadesEspacoRowChangeEvent : EventArgs {
            
            private tbUnidadesEspacoRow eventRow;
            
            private DataRowAction eventAction;
            
            public tbUnidadesEspacoRowChangeEvent(tbUnidadesEspacoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tbUnidadesEspacoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
