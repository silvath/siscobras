//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.510
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace mdlDataBaseData.Tabelas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class XsdTbUsuariosConcessoesPermissoes : DataSet {
        
        private tbUsuariosConcessoesPermissoesDataTable tabletbUsuariosConcessoesPermissoes;
        
        public XsdTbUsuariosConcessoesPermissoes() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected XsdTbUsuariosConcessoesPermissoes(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tbUsuariosConcessoesPermissoes"] != null)) {
                    this.Tables.Add(new tbUsuariosConcessoesPermissoesDataTable(ds.Tables["tbUsuariosConcessoesPermissoes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbUsuariosConcessoesPermissoesDataTable tbUsuariosConcessoesPermissoes {
            get {
                return this.tabletbUsuariosConcessoesPermissoes;
            }
        }
        
        public override DataSet Clone() {
            XsdTbUsuariosConcessoesPermissoes cln = ((XsdTbUsuariosConcessoesPermissoes)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tbUsuariosConcessoesPermissoes"] != null)) {
                this.Tables.Add(new tbUsuariosConcessoesPermissoesDataTable(ds.Tables["tbUsuariosConcessoesPermissoes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletbUsuariosConcessoesPermissoes = ((tbUsuariosConcessoesPermissoesDataTable)(this.Tables["tbUsuariosConcessoesPermissoes"]));
            if ((this.tabletbUsuariosConcessoesPermissoes != null)) {
                this.tabletbUsuariosConcessoesPermissoes.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "XsdTbUsuariosConcessoesPermissoes";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/XsdTbUsuariosConcessoesPermissoes.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletbUsuariosConcessoesPermissoes = new tbUsuariosConcessoesPermissoesDataTable();
            this.Tables.Add(this.tabletbUsuariosConcessoesPermissoes);
        }
        
        private bool ShouldSerializetbUsuariosConcessoesPermissoes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tbUsuariosConcessoesPermissoesRowChangeEventHandler(object sender, tbUsuariosConcessoesPermissoesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbUsuariosConcessoesPermissoesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnnIdConcessao;
            
            private DataColumn columnnIdPermissao;
            
            internal tbUsuariosConcessoesPermissoesDataTable() : 
                    base("tbUsuariosConcessoesPermissoes") {
                this.InitClass();
            }
            
            internal tbUsuariosConcessoesPermissoesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nIdConcessaoColumn {
                get {
                    return this.columnnIdConcessao;
                }
            }
            
            internal DataColumn nIdPermissaoColumn {
                get {
                    return this.columnnIdPermissao;
                }
            }
            
            public tbUsuariosConcessoesPermissoesRow this[int index] {
                get {
                    return ((tbUsuariosConcessoesPermissoesRow)(this.Rows[index]));
                }
            }
            
            public event tbUsuariosConcessoesPermissoesRowChangeEventHandler tbUsuariosConcessoesPermissoesRowChanged;
            
            public event tbUsuariosConcessoesPermissoesRowChangeEventHandler tbUsuariosConcessoesPermissoesRowChanging;
            
            public event tbUsuariosConcessoesPermissoesRowChangeEventHandler tbUsuariosConcessoesPermissoesRowDeleted;
            
            public event tbUsuariosConcessoesPermissoesRowChangeEventHandler tbUsuariosConcessoesPermissoesRowDeleting;
            
            public void AddtbUsuariosConcessoesPermissoesRow(tbUsuariosConcessoesPermissoesRow row) {
                this.Rows.Add(row);
            }
            
            public tbUsuariosConcessoesPermissoesRow AddtbUsuariosConcessoesPermissoesRow(int nIdConcessao, int nIdPermissao) {
                tbUsuariosConcessoesPermissoesRow rowtbUsuariosConcessoesPermissoesRow = ((tbUsuariosConcessoesPermissoesRow)(this.NewRow()));
                rowtbUsuariosConcessoesPermissoesRow.ItemArray = new object[] {
                        nIdConcessao,
                        nIdPermissao};
                this.Rows.Add(rowtbUsuariosConcessoesPermissoesRow);
                return rowtbUsuariosConcessoesPermissoesRow;
            }
            
            public tbUsuariosConcessoesPermissoesRow FindBynIdConcessaonIdPermissao(int nIdConcessao, int nIdPermissao) {
                return ((tbUsuariosConcessoesPermissoesRow)(this.Rows.Find(new object[] {
                            nIdConcessao,
                            nIdPermissao})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tbUsuariosConcessoesPermissoesDataTable cln = ((tbUsuariosConcessoesPermissoesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tbUsuariosConcessoesPermissoesDataTable();
            }
            
            internal void InitVars() {
                this.columnnIdConcessao = this.Columns["nIdConcessao"];
                this.columnnIdPermissao = this.Columns["nIdPermissao"];
            }
            
            private void InitClass() {
                this.columnnIdConcessao = new DataColumn("nIdConcessao", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnIdConcessao);
                this.columnnIdPermissao = new DataColumn("nIdPermissao", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnIdPermissao);
                this.Constraints.Add(new UniqueConstraint("XsdTbUsuariosConcessoesPermissoesKey1", new DataColumn[] {
                                this.columnnIdConcessao,
                                this.columnnIdPermissao}, true));
                this.columnnIdConcessao.AllowDBNull = false;
                this.columnnIdPermissao.AllowDBNull = false;
            }
            
            public tbUsuariosConcessoesPermissoesRow NewtbUsuariosConcessoesPermissoesRow() {
                return ((tbUsuariosConcessoesPermissoesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tbUsuariosConcessoesPermissoesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tbUsuariosConcessoesPermissoesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbUsuariosConcessoesPermissoesRowChanged != null)) {
                    this.tbUsuariosConcessoesPermissoesRowChanged(this, new tbUsuariosConcessoesPermissoesRowChangeEvent(((tbUsuariosConcessoesPermissoesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbUsuariosConcessoesPermissoesRowChanging != null)) {
                    this.tbUsuariosConcessoesPermissoesRowChanging(this, new tbUsuariosConcessoesPermissoesRowChangeEvent(((tbUsuariosConcessoesPermissoesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbUsuariosConcessoesPermissoesRowDeleted != null)) {
                    this.tbUsuariosConcessoesPermissoesRowDeleted(this, new tbUsuariosConcessoesPermissoesRowChangeEvent(((tbUsuariosConcessoesPermissoesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbUsuariosConcessoesPermissoesRowDeleting != null)) {
                    this.tbUsuariosConcessoesPermissoesRowDeleting(this, new tbUsuariosConcessoesPermissoesRowChangeEvent(((tbUsuariosConcessoesPermissoesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetbUsuariosConcessoesPermissoesRow(tbUsuariosConcessoesPermissoesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbUsuariosConcessoesPermissoesRow : DataRow {
            
            private tbUsuariosConcessoesPermissoesDataTable tabletbUsuariosConcessoesPermissoes;
            
            internal tbUsuariosConcessoesPermissoesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbUsuariosConcessoesPermissoes = ((tbUsuariosConcessoesPermissoesDataTable)(this.Table));
            }
            
            public int nIdConcessao {
                get {
                    return ((int)(this[this.tabletbUsuariosConcessoesPermissoes.nIdConcessaoColumn]));
                }
                set {
                    this[this.tabletbUsuariosConcessoesPermissoes.nIdConcessaoColumn] = value;
                }
            }
            
            public int nIdPermissao {
                get {
                    return ((int)(this[this.tabletbUsuariosConcessoesPermissoes.nIdPermissaoColumn]));
                }
                set {
                    this[this.tabletbUsuariosConcessoesPermissoes.nIdPermissaoColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tbUsuariosConcessoesPermissoesRowChangeEvent : EventArgs {
            
            private tbUsuariosConcessoesPermissoesRow eventRow;
            
            private DataRowAction eventAction;
            
            public tbUsuariosConcessoesPermissoesRowChangeEvent(tbUsuariosConcessoesPermissoesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tbUsuariosConcessoesPermissoesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
