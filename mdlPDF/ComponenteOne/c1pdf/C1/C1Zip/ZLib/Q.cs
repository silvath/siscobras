namespace C1.C1Zip.ZLib
{
    using System;

    internal class Q
    {
        // Methods
        static Q()
        {
            Q.JM = new int[1536] { 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255 };
            Q.JN = new int[96] { 80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5, 8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5, 24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577 };
            Q.JO = new int[31] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0 };
            Q.JP = new int[31] { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 };
            Q.JQ = new int[30] { 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 };
            Q.JR = new int[30] { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 };
        }

        public Q()
        {
        }

        private static int 4F(int[] 046, int 047, int 048, int 049, int[] 04A, int[] 04B, int[] 04C, int[] 04D, int[] 04E, int[] 04F, int[] 04G)
        {
            int num1;
            int num2;
            int num9;
            int[] numArray5;
            IntPtr ptr1;
            int num16;
            int[] numArray1 = new int[16];
            int[] numArray2 = new int[3];
            int[] numArray3 = new int[15];
            int[] numArray4 = new int[16];
            int num10 = 0;
            int num5 = 048;
            do
            {
                numArray5 = numArray1;
                ptr1 = ((IntPtr) 046[(047 + num10)]);
                numArray5[ptr1] = (numArray5[ptr1] + 1);
                num10 += 1;
                num5 -= 1;
            }
            while ((num5 != 0));
            if (numArray1[0] == 048)
            {
                04C[0] = -1;
                04D[0] = 0;
                return 0;
            }
            int num8 = 04D[0];
            int num6 = 1;
            while ((num6 <= 15))
            {
                if (numArray1[num6] != 0)
                {
                    break;
                }
                num6 += 1;
            }
            int num7 = num6;
            if (num8 < num6)
            {
                num8 = num6;
            }
            num5 = 15;
            while ((num5 != 0))
            {
                if (numArray1[num5] != 0)
                {
                    break;
                }
                num5 -= 1;
            }
            int num3 = num5;
            if (num8 > num5)
            {
                num8 = num5;
            }
            04D[0] = num8;
            int num14 = (1 << (num6 & 31));
            while ((num6 < num5))
            {
                num14 -= numArray1[num6];
                if (num14 < 0)
                {
                    return -3;
                }
                num6 += 1;
                num14 = (num14 << 1);
            }
            num14 -= numArray1[num5];
            if (num14 < 0)
            {
                return -3;
            }
            numArray5 = numArray1;
            ptr1 = ((IntPtr) num5);
            numArray5[ptr1] = (numArray5[ptr1] + num14);
            num6 = 0;
            numArray4[1] = num6;
            num10 = 1;
            int num13 = 2;
            goto Label_012D;
        Label_0112:
            num6 += numArray1[num10];
            numArray4[num13] = num6;
            num13 += 1;
            num10 += 1;
        Label_012D:
            num5 -= 1;
            if (num5 != 0)
            {
                goto Label_0112;
            }
            num5 = 0;
            num10 = 0;
            do
            {
                num6 = 046[(047 + num10)];
                if (num6 != 0)
                {
                    numArray5 = numArray4;
                    ptr1 = ((IntPtr) num6);
                    num16 = numArray5[ptr1];
                    numArray5[ptr1] = (num16 + 1);
                    04G[num16] = num5;
                }
                num10 += 1;
                num5 += 1;
            }
            while ((num5 < 048));
            048 = numArray4[num3];
            num5 = 0;
            numArray4[0] = num5;
            num10 = 0;
            int num4 = -1;
            int num12 = -num8;
            numArray3[0] = 0;
            int num11 = 0;
            int num15 = 0;
            while ((num7 <= num3))
            {
                num1 = numArray1[num7];
                goto Label_03A3;
            Label_01A6:
                num4 += 1;
                num12 += num8;
                num15 = (num3 - num12);
                num15 = ((num15 > num8) ? num8 : num15);
                num6 = (num7 - num12);
                num2 = (1 << (num6 & 31));
                if (num2 <= (num1 + 1))
                {
                    goto Label_020F;
                }
                num2 -= (num1 + 1);
                num13 = num7;
                if (num6 >= num15)
                {
                    goto Label_020F;
                }
                goto Label_0204;
            Label_01ED:
                num2 = (num2 << 1);
                num13 += 1;
                if (num2 <= numArray1[num13])
                {
                    goto Label_020F;
                }
                num2 -= numArray1[num13];
            Label_0204:
                num6 += 1;
                if (num6 < num15)
                {
                    goto Label_01ED;
                }
            Label_020F:
                num15 = (1 << (num6 & 31));
                if ((04F[0] + num15) > 1440)
                {
                    return -4;
                }
                num11 = 04F[0];
                numArray3[num4] = num11;
                numArray5 = 04F;
                numArray5[0] = (numArray5[0] + num15);
                if (num4 != 0)
                {
                    numArray4[num4] = num5;
                    numArray2[0] = ((int) ((byte) num6));
                    numArray2[1] = ((int) ((byte) num8));
                    num6 = (num5 >> ((num12 - num8) & 31));
                    numArray2[2] = ((num11 - numArray3[(num4 - 1)]) - num6);
                    Array.Copy(numArray2, 0, 04E, ((numArray3[(num4 - 1)] + num6) * 3), 3);
                }
                else
                {
                    04C[0] = num11;
                }
            Label_0299:
                if (num7 > (num12 + num8))
                {
                    goto Label_01A6;
                }
                numArray2[1] = ((int) ((byte) (num7 - num12)));
                if (num10 >= 048)
                {
                    numArray2[0] = 192;
                }
                else if (04G[num10] < 049)
                {
                    numArray2[0] = ((int) ((byte) ((04G[num10] < 256) ? 0 : 96)));
                    int num17 = num10;
                    num10 = (num17 + 1);
                    numArray2[2] = 04G[num10];
                }
                else
                {
                    numArray2[0] = ((int) ((byte) ((04B[(04G[num10] - 049)] + 16) + 64)));
                    int num18 = num10;
                    num10 = (num18 + 1);
                    numArray2[2] = 04A[(04G[num10] - 049)];
                }
                num2 = (1 << ((num7 - num12) & 31));
                num6 = (num5 >> (num12 & 31));
                while ((num6 < num15))
                {
                    Array.Copy(numArray2, 0, 04E, ((num11 + num6) * 3), 3);
                    num6 += num2;
                }
                num6 = (1 << ((num7 - 1) & 31));
                while (((num5 & num6) != 0))
                {
                    num5 ^= num6;
                    num6 = (num6 >> 1);
                }
                num5 ^= num6;
                for (num9 = ((1 << (num12 & 31)) - 1); ((num5 & num9) != numArray4[num4]); num9 = ((1 << (num12 & 31)) - 1))
                {
                    num4 -= 1;
                    num12 -= num8;
                }
            Label_03A3:
                int num19 = num1;
                num1 = (num19 - 1);
                if (num1 != 0)
                {
                    goto Label_0299;
                }
                num7 += 1;
            }
            if ((num14 == 0) || (num3 == 1))
            {
                return 0;
            }
            return -5;
        }

        internal static int 4G(int[] 04H, int[] 04I, int[] 04J, int[] 04K, T 04L)
        {
            int[] numArray1 = new int[1];
            int[] numArray2 = new int[19];
            int num1 = Q.4F(04H, 0, 19, 19, null, null, 04J, 04I, 04K, numArray1, numArray2);
            if (num1 == -3)
            {
                04L.LR = "oversubscribed dynamic bit lengths tree";
                return num1;
            }
            if ((num1 != -5) && (04I[0] != 0))
            {
                return num1;
            }
            04L.LR = "incomplete dynamic bit lengths tree";
            return -3;
        }

        internal static int 4H(int 04M, int 04N, int[] 04O, int[] 04P, int[] 04Q, int[] 04R, int[] 04S, int[] 04T, T 04U)
        {
            int[] numArray1 = new int[1];
            int[] numArray2 = new int[288];
            int num1 = Q.4F(04O, 0, 04M, 257, Q.JO, Q.JP, 04R, 04P, 04T, numArray1, numArray2);
            if ((num1 != 0) || (04P[0] == 0))
            {
                if (num1 == -3)
                {
                    04U.LR = "oversubscribed literal/length tree";
                    return num1;
                }
                if (num1 != -4)
                {
                    04U.LR = "incomplete literal/length tree";
                    num1 = -3;
                }
                return num1;
            }
            num1 = Q.4F(04O, 04M, 04N, 0, Q.JQ, Q.JR, 04S, 04Q, 04T, numArray1, numArray2);
            if ((num1 != 0) || ((04Q[0] == 0) && (04M > 257)))
            {
                if (num1 == -3)
                {
                    04U.LR = "oversubscribed distance tree";
                    return num1;
                }
                if (num1 == -5)
                {
                    04U.LR = "incomplete distance tree";
                    return -3;
                }
                if (num1 != -4)
                {
                    04U.LR = "empty distance tree with lengths";
                    num1 = -3;
                }
                return num1;
            }
            return 0;
        }

        internal static int 4I(int[] 04V, int[] 04W, int[][] 04X, int[][] 04Y, T 04Z)
        {
            04V[0] = 9;
            04W[0] = 5;
            04X[0] = Q.JM;
            04Y[0] = Q.JN;
            return 0;
        }


        // Fields
        private const int J9 = 1440;
        private const int JA = 0;
        private const int JB = 1;
        private const int JC = 2;
        private const int JD = -1;
        private const int JE = -2;
        private const int JF = -3;
        private const int JG = -4;
        private const int JH = -5;
        private const int JI = -6;
        private const int JJ = 9;
        private const int JK = 5;
        private const int JL = 15;
        private static int[] JM;
        private static int[] JN;
        private static int[] JO;
        private static int[] JP;
        private static int[] JQ;
        private static int[] JR;
    }
}

